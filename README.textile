h1. Impresario

h1. What is a Workflow?

There are many implementations of workflow systems in many languages.  There
are even standard workflow definitions and systmes (BPEL, XPDL).

Impresario workflows are state machines with well defined, connected graphs,
transitions and trigger conditions.  Workflows are implemented as simple
Clojure data strucutres.

The workflow declaration defines nodes, which are represented as Clojure symbols.

A workflow may have one and only one default entry point.  Any node from which there
are no possible transitions away from the node are terminal nodes.


h2. External Triggers

Waking up a workflow.  External actors make trigger or awaken a workflow
providing new state information for the workflow so that it may make another
transition.

h2. What do Workflows have access to?

Workflows have access to a key value storage area in which they may store the
workflow state.  There are two main stores, an internal store which is only
accessible to the workflow and an external store which is visible to both the
workflow and code external to the workflow.

h2. Immutability and the Workfow's Store

Workflows and their stores should be immutable.  This provides calling code the
ability to test a workflow to see where it would transition to if a transition
were made.

Some thought needs to be put into this, as there will likely be side-effects
caused by the invocation of trigger and observer functions.  It is very useful
to see if a workflow would transition and to what final state it would
transition -- one way to model this is to separate the transition predicates
from the observers / triggers of external actions.

h2. What can Workflows interact with?

h2. What can trigger Workflows?

h2. Serialiation

